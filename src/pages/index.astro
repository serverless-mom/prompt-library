---
import BaseLayout from '../layouts/BaseLayout.astro'
import { getCollection } from 'astro:content'

const posts = (await getCollection('library'))
  .filter((post) => !post.data.draft)
  .sort((a, b) => {
    // Put setup card first
    if (a.data.title === 'Checkly Setup') return -1
    if (b.data.title === 'Checkly Setup') return 1
    return 0
  })
const base = import.meta.env.BASE_URL.endsWith('/')
  ? import.meta.env.BASE_URL
  : import.meta.env.BASE_URL + '/'
---

<BaseLayout title="Monitoring Prompts Library">
  <div class="index-content framed">
    <pre
      id="hello-there"
      style="color: var(--accent); font-size: calc(var(--font-size) * 0.9); line-height: 1.2; margin: 20px 0;">
                                                   ___ 
 |\/|  _  ._  o _|_  _  ._        o _|_ |_     /\   |  
 |  | (_) | | |  |_ (_) |    \/\/ |  |_ | |   /--\ _|_ 
</pre>
    <h1 style="margin-top: 0; display: none;">Monitoring Prompts</h1>
    <p>
      Explore our collection of AI prompts for Checkly and Playwright testing
      tools.
    </p>

    <div class="filter-buttons">
      <button class="filter-btn active" data-filter="all">All</button>
      <button class="filter-btn" data-filter="Checkly">Checkly</button>
      <button class="filter-btn" data-filter="Playwright">Playwright</button>
    </div>
  </div>

  <div class="cards-grid">
    {
      posts.map((post) => {
        const postUrl = post.data.externalLink || `${base}posts/${post.slug}/`
        const isExternal = !!post.data.externalLink
        const hasChecklyTag = post.data.tags?.includes('Checkly')
        const hasPlaywrightTag = post.data.tags?.includes('Playwright')

        return (
          <article class="card" data-tags={post.data.tags?.join(',') || ''}>
            {post.data.sticker && (
              <div class="start-here-sticker" style={`transform: rotate(${-12 + (Math.random() * 2 - 1)}deg)`}>{post.data.sticker}</div>
            )}
            <div class="card-header">
              <div class="card-icon">
                {post.data.icon ? (
                  <span class={hasChecklyTag ? 'icon-checkly' : hasPlaywrightTag ? 'icon-playwright' : 'icon-default'}>
                    {post.data.icon}
                  </span>
                ) : (
                  <>
                    {hasChecklyTag && <span class="icon-checkly">âœ“</span>}
                    {hasPlaywrightTag && <span class="icon-playwright">ðŸŽ­</span>}
                  </>
                )}
              </div>
              <div class="card-tags">
                {post.data.tags &&
                  post.data.tags.map((tag) => (
                    <span class="tag" data-tag={tag}>
                      {tag}
                    </span>
                  ))}
              </div>
            </div>

            <div class="card-content">
              <h3 class="card-title">
                <a
                  href={postUrl}
                  target={isExternal ? '_blank' : undefined}
                  rel={isExternal ? 'noopener' : undefined}
                >
                  {post.data.title}
                </a>
              </h3>
              {post.data.description && (
                <p class="card-description">{post.data.description}</p>
              )}
            </div>

            <div class="card-footer">
              <a
                href={postUrl}
                class="read-more-btn"
                target={isExternal ? '_blank' : undefined}
                rel={isExternal ? 'noopener' : undefined}
              >
                Read More â†’
              </a>
            </div>
          </article>
        )
      })
    }
  </div>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const filterButtons = document.querySelectorAll('.filter-btn')
    const cards = document.querySelectorAll('.card')

    filterButtons.forEach((button) => {
      button.addEventListener('click', function (event) {
        const target = event.currentTarget as HTMLElement
        const filter = target.getAttribute('data-filter')

        // Update active button
        filterButtons.forEach((btn) => btn.classList.remove('active'))
        target.classList.add('active')

        // Filter cards
        cards.forEach((card) => {
          const cardElement = card as HTMLElement
          const tags = cardElement.getAttribute('data-tags') || ''

          if (filter === 'all') {
            cardElement.style.display = 'block'
          } else {
            if (tags.includes(filter || '')) {
              cardElement.style.display = 'block'
            } else {
              cardElement.style.display = 'none'
            }
          }
        })
      })
    })
  })
</script>

<style>
  .start-here-sticker {
    position: absolute;
    top: -18px;
    left: -8px;
    background: var(--accent);
    color: var(--background);
    padding: 4px 12px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    z-index: 10;
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    border: 1px solid var(--accent);
  }

  .card {
    position: relative;
  }
</style>
